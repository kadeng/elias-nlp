
//----------------------------------------------------
// The following code was generated by CUP v0.10k
// Tue May 14 16:14:31 CEST 2002
//----------------------------------------------------

package elias.agent.authoring.patterncompiler;

import java_cup.runtime.*;
import elias.agent.runtime.pattern.*;

/** CUP v0.10k generated parser.
  * @version Tue May 14 16:14:31 CEST 2002
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\031\000\002\003\003\000\002\002\004\000\002\004" +
    "\005\000\002\004\003\000\002\004\003\000\002\004\003" +
    "\000\002\004\003\000\002\004\003\000\002\004\003\000" +
    "\002\004\003\000\002\004\003\000\002\004\003\000\002" +
    "\004\003\000\002\005\003\000\002\007\004\000\002\012" +
    "\004\000\002\013\004\000\002\014\005\000\002\006\005" +
    "\000\002\006\005\000\002\010\005\000\002\010\005\000" +
    "\002\015\004\000\002\011\005\000\002\011\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\050\000\020\007\006\011\007\013\017\014\024\015" +
    "\023\017\016\020\014\001\002\000\004\002\052\001\002" +
    "\000\020\002\ufffc\004\ufffc\005\ufffc\006\ufffc\010\ufffc\012" +
    "\ufffc\016\ufffc\001\002\000\020\007\006\011\007\013\017" +
    "\014\024\015\023\017\016\020\014\001\002\000\020\007" +
    "\006\011\007\013\017\014\024\015\023\017\016\020\014" +
    "\001\002\000\020\002\ufffb\004\ufffb\005\045\006\ufffb\010" +
    "\ufffb\012\ufffb\016\ufffb\001\002\000\020\002\ufffd\004\043" +
    "\005\ufffd\006\ufffd\010\ufffd\012\ufffd\016\ufffd\001\002\000" +
    "\020\002\ufff9\004\ufff9\005\ufff9\006\ufff9\010\ufff9\012\ufff9" +
    "\016\ufff9\001\002\000\020\002\ufff8\004\ufff8\005\ufff8\006" +
    "\ufff8\010\ufff8\012\ufff8\016\ufff8\001\002\000\020\002\ufff4" +
    "\004\ufff4\005\ufff4\006\ufff4\010\ufff4\012\ufff4\016\ufff4\001" +
    "\002\000\020\002\ufffe\004\ufffe\005\ufffe\006\ufffe\010\ufffe" +
    "\012\ufffe\016\ufffe\001\002\000\020\002\ufff5\004\ufff5\005" +
    "\ufff5\006\ufff5\010\ufff5\012\ufff5\016\ufff5\001\002\000\020" +
    "\007\006\011\007\013\017\014\024\015\023\017\016\020" +
    "\014\001\002\000\014\002\001\004\032\005\033\006\031" +
    "\016\030\001\002\000\020\002\ufff6\004\ufff6\005\ufff6\006" +
    "\ufff6\010\ufff6\012\ufff6\016\ufff6\001\002\000\020\002\ufff7" +
    "\004\ufff7\005\ufff7\006\ufff7\010\ufff7\012\ufff7\016\ufff7\001" +
    "\002\000\020\007\006\011\007\013\017\014\024\015\023" +
    "\017\016\020\014\001\002\000\020\007\006\011\007\013" +
    "\017\014\024\015\023\017\016\020\014\001\002\000\020" +
    "\002\ufffa\004\ufffa\005\ufffa\006\026\010\ufffa\012\ufffa\016" +
    "\ufffa\001\002\000\020\007\006\011\007\013\017\014\024" +
    "\015\023\017\016\020\014\001\002\000\020\002\uffe9\004" +
    "\032\005\033\006\uffe9\010\uffe9\012\uffe9\016\030\001\002" +
    "\000\020\002\uffeb\004\uffeb\005\uffeb\006\uffeb\010\uffeb\012" +
    "\uffeb\016\uffeb\001\002\000\020\007\006\011\007\013\017" +
    "\014\024\015\023\017\016\020\014\001\002\000\020\007" +
    "\006\011\007\013\017\014\024\015\023\017\016\020\014" +
    "\001\002\000\020\007\006\011\007\013\017\014\024\015" +
    "\023\017\016\020\014\001\002\000\020\002\uffed\004\032" +
    "\005\uffed\006\uffed\010\uffed\012\uffed\016\030\001\002\000" +
    "\020\002\uffef\004\uffef\005\uffef\006\uffef\010\uffef\012\uffef" +
    "\016\030\001\002\000\020\002\uffea\004\032\005\033\006" +
    "\uffea\010\uffea\012\uffea\016\030\001\002\000\020\002\ufff2" +
    "\004\032\005\033\006\031\010\ufff2\012\ufff2\016\030\001" +
    "\002\000\020\002\ufff1\004\032\005\033\006\031\010\ufff1" +
    "\012\ufff1\016\030\001\002\000\014\004\032\005\033\006" +
    "\031\012\042\016\030\001\002\000\020\002\ufff0\004\ufff0" +
    "\005\ufff0\006\ufff0\010\ufff0\012\ufff0\016\ufff0\001\002\000" +
    "\020\007\006\011\007\013\017\014\024\015\023\017\016" +
    "\020\014\001\002\000\020\002\uffee\004\uffee\005\uffee\006" +
    "\uffee\010\uffee\012\uffee\016\030\001\002\000\020\007\006" +
    "\011\007\013\017\014\024\015\023\017\016\020\014\001" +
    "\002\000\020\002\uffec\004\032\005\uffec\006\uffec\010\uffec" +
    "\012\uffec\016\030\001\002\000\014\004\032\005\033\006" +
    "\031\010\050\016\030\001\002\000\020\002\uffff\004\uffff" +
    "\005\uffff\006\uffff\010\uffff\012\uffff\016\uffff\001\002\000" +
    "\020\002\ufff3\004\ufff3\005\ufff3\006\ufff3\010\ufff3\012\ufff3" +
    "\016\030\001\002\000\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\050\000\030\003\003\004\017\005\014\006\010\007" +
    "\004\010\007\011\024\012\011\013\012\014\020\015\021" +
    "\001\001\000\002\001\001\000\002\001\001\000\026\004" +
    "\050\005\014\006\010\007\004\010\007\011\024\012\011" +
    "\013\012\014\020\015\021\001\001\000\026\004\046\005" +
    "\014\006\010\007\004\010\007\011\024\012\011\013\012" +
    "\014\020\015\021\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\026\004\040\005" +
    "\014\006\010\007\004\010\007\011\024\012\011\013\012" +
    "\014\020\015\021\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\026\004\037\005\014\006\010" +
    "\007\004\010\007\011\024\012\011\013\012\014\020\015" +
    "\021\001\001\000\026\004\036\005\014\006\010\007\004" +
    "\010\007\011\024\012\011\013\012\014\020\015\021\001" +
    "\001\000\002\001\001\000\026\004\026\005\014\006\010" +
    "\007\004\010\007\011\024\012\011\013\012\014\020\015" +
    "\021\001\001\000\002\001\001\000\002\001\001\000\026" +
    "\004\035\005\014\006\010\007\004\010\007\011\024\012" +
    "\011\013\012\014\020\015\021\001\001\000\026\004\034" +
    "\005\014\006\010\007\004\010\007\011\024\012\011\013" +
    "\012\014\020\015\021\001\001\000\026\004\033\005\014" +
    "\006\010\007\004\010\007\011\024\012\011\013\012\014" +
    "\020\015\021\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\026\004\043\005\014" +
    "\006\010\007\004\010\007\011\024\012\011\013\012\014" +
    "\020\015\021\001\001\000\002\001\001\000\026\004\045" +
    "\005\014\006\010\007\004\010\007\011\024\012\011\013" +
    "\012\014\020\015\021\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // and ::= and AND pattern 
            {
              Pattern RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Pattern a = (Pattern)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Pattern b = (Pattern)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
		a.addChild(b);
		RESULT = a;
	
              CUP$parser$result = new java_cup.runtime.Symbol(7/*and*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // and ::= pattern AND pattern 
            {
              Pattern RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Pattern a = (Pattern)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Pattern b = (Pattern)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
		RESULT = Pattern.createAnd();
		RESULT.addChild(a);
		RESULT.addChild(b);
	
              CUP$parser$result = new java_cup.runtime.Symbol(7/*and*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // named ::= pattern NAMED 
            {
              Pattern RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Pattern a = (Pattern)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
		RESULT = Pattern.createNamed(n, a);
	
              CUP$parser$result = new java_cup.runtime.Symbol(11/*named*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // or ::= or OR pattern 
            {
              Pattern RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Pattern s = (Pattern)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Pattern b = (Pattern)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
		s.addChild(b);
		RESULT = s;
	
              CUP$parser$result = new java_cup.runtime.Symbol(6/*or*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // or ::= pattern OR pattern 
            {
              Pattern RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Pattern a = (Pattern)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Pattern b = (Pattern)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
		RESULT = Pattern.createOr();
		RESULT.addChild(a);
		RESULT.addChild(b);
	
              CUP$parser$result = new java_cup.runtime.Symbol(6/*or*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // sequence ::= sequence BEFORE pattern 
            {
              Pattern RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Pattern s = (Pattern)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Pattern b = (Pattern)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
		s.addChild(b);
		RESULT = s;
	
              CUP$parser$result = new java_cup.runtime.Symbol(4/*sequence*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // sequence ::= pattern BEFORE pattern 
            {
              Pattern RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Pattern a = (Pattern)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Pattern b = (Pattern)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
		RESULT = Pattern.createSequence();
		RESULT.addChild(a);
		RESULT.addChild(b);
	
              CUP$parser$result = new java_cup.runtime.Symbol(4/*sequence*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // optional ::= OPTLBRACK pattern OPTRBRACK 
            {
              Pattern RESULT = null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Pattern p = (Pattern)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
		RESULT = Pattern.createOptional(p);
	
              CUP$parser$result = new java_cup.runtime.Symbol(10/*optional*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // repetition ::= REPEAT pattern 
            {
              Pattern RESULT = null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Range r = (Range)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Pattern p = (Pattern)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
		RESULT = Pattern.createRepetition(p, r.from, r.to);
	
              CUP$parser$result = new java_cup.runtime.Symbol(9/*repetition*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // search ::= SEARCH pattern 
            {
              Pattern RESULT = null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Range r = (Range)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Pattern p = (Pattern)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
		RESULT = Pattern.createSearch(p, r.from, r.to);
	
              CUP$parser$result = new java_cup.runtime.Symbol(8/*search*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // not ::= NOT pattern 
            {
              Pattern RESULT = null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Pattern p = (Pattern)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
		RESULT = Pattern.createNegation(p);
	
              CUP$parser$result = new java_cup.runtime.Symbol(5/*not*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // terminal_pattern ::= TERMINAL 
            {
              Pattern RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Terminal t = (Terminal)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
		RESULT = Pattern.createTerminal(t);
	
              CUP$parser$result = new java_cup.runtime.Symbol(3/*terminal_pattern*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // pattern ::= PREDEFINED_PATTERN 
            {
              Pattern RESULT = null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Pattern p = (Pattern)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
				RESULT = p;
	
              CUP$parser$result = new java_cup.runtime.Symbol(2/*pattern*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // pattern ::= optional 
            {
              Pattern RESULT = null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Pattern p = (Pattern)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
			RESULT = p;
	
              CUP$parser$result = new java_cup.runtime.Symbol(2/*pattern*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // pattern ::= named 
            {
              Pattern RESULT = null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Pattern p = (Pattern)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
			RESULT = p;
	
              CUP$parser$result = new java_cup.runtime.Symbol(2/*pattern*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // pattern ::= repetition 
            {
              Pattern RESULT = null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Pattern p = (Pattern)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
			RESULT = p;
	
              CUP$parser$result = new java_cup.runtime.Symbol(2/*pattern*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // pattern ::= search 
            {
              Pattern RESULT = null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Pattern p = (Pattern)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
			RESULT = p;
	
              CUP$parser$result = new java_cup.runtime.Symbol(2/*pattern*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // pattern ::= and 
            {
              Pattern RESULT = null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Pattern p = (Pattern)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
			RESULT = p;
	
              CUP$parser$result = new java_cup.runtime.Symbol(2/*pattern*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // pattern ::= or 
            {
              Pattern RESULT = null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Pattern p = (Pattern)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
			RESULT = p;
	
              CUP$parser$result = new java_cup.runtime.Symbol(2/*pattern*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // pattern ::= not 
            {
              Pattern RESULT = null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Pattern p = (Pattern)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
			RESULT = p;
	
              CUP$parser$result = new java_cup.runtime.Symbol(2/*pattern*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // pattern ::= sequence 
            {
              Pattern RESULT = null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Pattern p = (Pattern)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
			RESULT = p;
	
              CUP$parser$result = new java_cup.runtime.Symbol(2/*pattern*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // pattern ::= terminal_pattern 
            {
              Pattern RESULT = null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Pattern p = (Pattern)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
		RESULT = p;
	
              CUP$parser$result = new java_cup.runtime.Symbol(2/*pattern*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // pattern ::= LBRACK pattern RBRACK 
            {
              Pattern RESULT = null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Pattern p = (Pattern)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
		RESULT = p;
	
              CUP$parser$result = new java_cup.runtime.Symbol(2/*pattern*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= pattern_structure EOF 
            {
              Object RESULT = null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		PatternStructure start_val = (PatternStructure)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = new java_cup.runtime.Symbol(0/*$START*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // pattern_structure ::= pattern 
            {
              PatternStructure RESULT = null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Pattern p = (Pattern)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
		RESULT = new PatternStructure(p);
	
              CUP$parser$result = new java_cup.runtime.Symbol(1/*pattern_structure*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

